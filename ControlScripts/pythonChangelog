- Rewrite to python, including a number of API changes
    - Any function that previously generated output (see @output in the comments) to return its value, now simple returns the value
    - The fail function has been replaced by using exceptions
    - host objects
        - HOST_*
            - all HOST_* global variables are now actual attributes of the host object, see the object for the current names
        - hostReadSettings; has been split in two
            - host.parseSetting reads one setting each time it's called
            - host.checkSettings checks the sanity of the settings and fills in any defaults
        - hostLoadSettings no longer exists, just use the existing objects, which can be found through the scenario object's getObjects('host') and getObjectsDict('host')
        - hostSendCommand
            - host.sendCommmand
        - hostSendFile
            - host.SendFile
        - hostSendFiles; has its semantics tightened over the previous versions, take care with that
            - host.sendFiles
        - hostGetFile
            - host.getFile
        - hostPrepare; note that the preparation script is no longer supported
            - host.prepare
        - hostCleanup; note that the cleanup script is no longer supported
            - host.cleanup
        - hostGetTestDir
            - host.getTestDir
        - hostGetPersistentTestDir
            - host.getPersistentTestDir
        - hostGetSubnet
            - host.getSubNet
        - hostGetAddress
            - host.getAddress
        - hostTCSaveOutboundPortList
            - no longer exists; use host.tcOutboundPortList
        - hostTCSaveInboundPortList
            - no longer exists; use host.tcInboundPortList
        - hostTCSaveProtocol
            - no longer exists; use host.tcProtocol
        - hostAPIVersion
            - host.APIVersion
- Moved parent classes of objects as well as function modules to core/
    - This includes a collapse of the _parser_ and _defaults_ modules into their respective parent classes
- Global availability of functions has become limited
    - logError
        - Use:
            from core.campaign import Campaign
            Campaign.logger.log( .... )
        - But see fail, below
    - LINE_NUMBER
        - Use:
            from core.campaign import Campaign
            Campaign.currentLineNumber
        - This is only correct when called during initialization of objects or when parsing their settings
    - Any of the parsing functions
        - Add import:
            from core.parsing import *
    - fail
        - Rewrite the old
            logError( 'Something went really wrong' )
            fail
        - To
            raise Exception( 'Something went really wrong' )
    - checkFail, checkFailReturn, cleanFailSignal, signalFail, failScenarioFile, checkFailScenarioFile
        - All removed: they no longer have any function
    - reinializeCleanup, cleanup, getCleanupLength, addCleanupCommand, insertCleanupCommand, addCleanupScript, newCleanupScriptInde, removeCleanupScript
        - All removed, we now have actual robust state! be sure to write your cleanup() method such that it always cleans up nicely, no matter when it's called (so check whether you've done stuff and clean up accordingly)
    - callNonBash
        - Removed; since we're using python, anyway, you can just use python. If you really need another language, just call it directly from python.
    - relativepath
        - Removed; use the python functions from the os.path library
    - loadFunctionsScript
        - Removed; see the specific functions for replacements
    - loadModule
        - Use:
            from core.campaign import Campaign
            Campaign.loadModule
        - See the documentation there for exact usage
    - existsModule
        - Removed; just load it and disregard the result, if it didn't exist an ImportError will be raised
    - FIXME to be added: functions/basefunction.sh, functions/merkle.sh, functions/torrent.sh
    - FIXME to be added: most global variables
- A number of extensions of the core API
    - core.parsing (previously functions/parsing)
        - isPositiveInt
        - isPositiveFloat
    - a new logger object to replace logError, with more powerful possibilities
- Introduced standardized naming for parameters (camelCase based); old names will be supported for some time but will be deprecated eventually
    - host objects
        - remoteFolder; already standardized camelCase, but the use of Folder is wrong
            - remoteDirectory
        - tc_iface
            - tcInterface
        - tc_down
            - tcMaxDownSpeed
        - tc_down_burst
            - tcMaxDownBurst
        - tc_up
            - tcMaxUpSpeed
        - tc_up_burst
            - tcMaxUpBurst
        - tc_loss
            - tcLossChance
        - tc_corruption
            - tcCorruptionChance
        - tc_duplication
            - tcDuplicationChance
        - tc_delay
            - tcDelay
        - tc_jitter
            - tcJitter
- Deprecated preparation and cleanup parameters for host: they had bad semantics to begin with and wouldn't work as they were with the python version, anyway. If the feature was used, please contact us.
