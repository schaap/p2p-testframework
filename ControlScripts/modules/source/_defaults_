#!/bin/bash

#
# The default implementations for the source API.
# Module implementors can copy these functions if they really wish to change them, or just call them if needed.
# Whenever copying, please do NOT overwrite the default implementations, but just the actual API function.
#

##
# Returns the API version of this defaults file.
# This function should not be used by implementations!
#
# @output   The API version
##
function sourceAPIVersion__default() {
    echo "1.0.1"
}

##
# Outputs the command line for retrieving the source code of a client.
# Interpret $CLIENT_LOCATION for figuring out where the source is to be fetched from.
# Note: should not attempt to do the retrieving itself!
#
# No default implementation.
#
# @output   The command line for retrieving the source code of a client.
##
#function sourcePrepareCommand() {
#}

##
# Prepares the source code of the client on the local machine.
# The default implementation creates the directory ${LOCAL_TEST_DIR}/clients/$CLIENT_NAME/source/, changes to it and calls the prepare command, encapsulating it in a bit of bash scripting to check whether it succeeds.
#
# @return   True (0) iff the prepare command seems to have succeeded succesfully.
##
function sourcePrepareLocal__default() {
    local cmd=`sourcePrepareCommand`
    local logfile=`createTempFile`
    local ans=`bash -l -c "mkdir -p \"${LOCAL_TEST_DIR}/clients/${CLIENT_NAME}/source/\"; cd \"${LOCAL_TEST_DIR}/clients/${CLIENT_NAME}/source/\"; ( $cmd ) 1>&2 && echo -n \"OK\"" 2> "$logfile"`
    if [ "$ans" != "OK" ]; then
        logError "source:_defaults_ :: preparing locally seems to have failed. Any output follows."
        ans=`cat "$logfile"`
        logError "$ans"
        rm -f "$logfile"
        return 1
    fi
    rm -f "$logfile"
    return 0
}

##
# Prepares the source code of the client on the remote machine.
# Use the Host API to send commands.
# The default implementation creates the directory `hostGetTestDir`/clients/$CLIENT_NAME/source/, changes to it and calls the prepare command, encapsulating it in a bit of bash scripting to check whether it succeeds.
#
# @return   True (0) iff the prepare command seems to have succeeded succesfully.
##
function sourcePrepareRemote__default() {
    local cmd=`sourcePrepareCommand`
    addCleanupScript
    local cleanupidx=$?
    addCleanupCommand "hostLoadSettings $HOST_NAME" $cleanupidx
    local tmpdir="`hostGetPersistentTestDir`"
    local logfile="`createRemoteTempFile \"$tmpdir\"`"
    addCleanupCommand "hostSendCommand \"rm -f \\\"$logfile\\\"\"" $cleanupidx
    local remotedir="`hostGetTestDir`/clients/${CLIENT_NAME}/source"
    local ans=`hostSendCommand "( mkdir -p \"$remotedir/\"; cd \"$remotedir/\"; ( $cmd ) 1>&2 && echo -n \"OK\" ) 2> \"$logfile\""`
    if [ "$ans" != "OK" ]; then
        logError "source:_defaults_ :: preparing remotely seems to have failed. Any output follows."
        local locallogfile=`createTempFile`
        hostGetFile "$logfile" "$locallogfile" 1
        ans=`cat "$locallogfile"`
        logError "$ans"
        rm -f "$logfile"
        hostSendCommand "rm -f \"$logfile\""
        removeCleanupScript $cleanupidx
        return 1
    fi
    hostSendCommand "rm -f \"$logfile\""
    removeCleanupScript $cleanupidx
    return 0
}
