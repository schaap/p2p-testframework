#!/bin/bash

#
# The default implementation for the file API.
# Module implementors can copy these functions if they really wish to change them, or just call them if needed.
# Whenever copying, please do NOT overwrite the default implementations, but just the actual API function.
#

##
# Returns the API version of this defaults file.
# This function should not be used by implementations!
#
# @output   The API version
##
function fileAPIVersion__default() {
    echo "1.0.3"
}

##
# Read settings from the provided settings file and save them to ${LOCAL_TEST_DIR}/files/$FILE_NAME .
# This default implementation just writes all the default parameters to "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"
##
function fileReadSettings__default() {
    mkdir -p "${LOCAL_TEST_DIR}/files/$FILE_NAME/"
    echo -n "$FILE_SUBTYPE" > "${LOCAL_TEST_DIR}/files/$FILE_NAME/modulename"

    # Save all settings, including the generic ones, to a file
    # Easiest is just a bash script that sets all variables, but anything is allowed as long as ${LOCAL_TEST_DIR}/files/$FILE_NAME/ is created and ${LOCAL_TEST_DIR}/files/$FILE_NAME/modulename contains the module subtype.
    echo "#!/bin/bash" > "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"
    echo "FILE_NAME=\"$FILE_NAME\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"
    echo "FILE_SUBTYPE=\"$FILE_SUBTYPE\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"
    echo "FILE_ROOTHASH=\"$FILE_ROOTHASH\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"
    echo "FILE_METAFILE=\"$FILE_METAFILE\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"
}

##
# Loads previously saved settings into memory by loading "${LOCAL_TEST_DIR}/files/$1/conf"
# Checks "${LOCAL_TEST_DIR}/files/$1/modulename" against "$2" to be sure the correct module type will be loaded and offloads to the correct module is needed
#
# This default implementation complements the default implementation for fileReadSettings
#
# @param    The name of the file object to be loaded.
# @param    The name of this module subtype
##
function fileLoadSettings__default() {
    if [ ! -d "${LOCAL_TEST_DIR}/files/$1" ]; then
        logError "file:_defaults_ :: Can't load settings for file $1"
        fail
    fi
    if [ `cat "${LOCAL_TEST_DIR}/files/$1/modulename"` != "$2" ]; then
        function fileAPIVersion() {
            echo "wrong"
        }
        loadModule file/`cat "${LOCAL_TEST_DIR}/files/$1/modulename"`
        if [ "`fileAPIVersion`" != `fileAPIVersion__default` ]; then
            logError "file:_defaults_ :: API version mismatch: the core expects API version `fileAPIVersion__default` but module file:`cat "${LOCAL_TEST_DIR}/files/$1/modulename"` seems to have API version `fileAPIVersion`."
            fail
        fi
        fileLoadSettings $1
        return
    fi
    . "${LOCAL_TEST_DIR}/files/$1/conf"
}

##
# Send any required files to the host.
# This function will be called for each host.
# Use the host API to do the actual sending of the files.
#
# Default implementation uploads the metafile, if given, to the `hostGetTestDir`/files/$FILE_NAME/meta/ directory.
##
function fileSendToHost__default() {
    if [ ! -z "$FILE_METAFILE" ]; then
        local postfix=`echo "$FILE_METAFILE" | sed -e "s/^.*$/\\0./" | sed -e "s/^[^.]*\(\..*\)$/\\1/" | sed -e "s/^.*\(\.[^.]*\)\.$/\\1/" | sed -e "s/\.\(.*\)/\\1/"`
        local filename="`hostGetTestDir`/files/$FILE_NAME/meta/meta_file"
        if [ ! -z "$postfix" ]; then
            filename="${filename}.$postfix"
        fi
        hostSendCommand "mkdir -p \"`hostGetTestDir`/files/$FILE_NAME/meta/\""
        hostSendFile "$FILE_METAFILE" "$filename"
    fi
}

##
# Send any files required for seeding to the host.
# This function will be called for each host on which seeding of the file is needed.
# Note that fileSendToHost will also be called, before this function is called.
# Use the host API to do the actual sending of the files.
#
# No default implementation
##
#function fileSendToSeedingHost() {
#}

##
# Output the path to the file, or the root directory of a set of files, on the currently loaded host.
# This assumes that fileSendToHost has already been called.
# This file is only available for seeding hosts, use the execution API to verify this, if needed.
# Use the host API for host specific queries, if needed.
#
# No default implementation
##
#function fileGetName() {
#}

##
# Output the path to the file containing metadata on the currently loaded host.
# If no such file is available, output "".
# An example of a metadata file is a .torrent file.
# Use the host API for host specific queries, if needed.
#
# Default implementation returns the default meta file, if any was given.
##
function fileGetMetaName__default() {
    if [ ! -z "$FILE_METAFILE" ]; then
        local postfix=`echo "$FILE_METAFILE" | sed -e "s/^.*$/\\0./" | sed -e "s/^[^.]*\(\..*\)$/\\1/" | sed -e "s/^.*\(\.[^.]*\)\.$/\\1/" | sed -e "s/\.\(.*\)/\\1/"`
        local filename="`hostGetTestDir`/files/$FILE_NAME/meta/meta_file"
        if [ ! -z "$postfix" ]; then
            filename="${filename}.$postfix"
        fi
        echo "$filename"
    fi
}

##
# Output the Merkle root hash of the file.
# If no such root hash is known, output "".
#
# Default implementation reflects the value in FILE_ROOTHASH
##
function fileGetRootHash__default() {
    if [ ! -z "$FILE_ROOTHASH" ]; then
        echo "$FILE_ROOTHASH"
        return
    fi
    echo ""
}
