#!/bin/bash

#
# Implementation of the file API for a single local file.
# This file module supports these extra parameters:
# - path        The path to the actual file on the local machine
#

##
# Read settings from the provided settings file and save them to ${LOCAL_TEST_DIR}/files/$FILE_NAME .
# Please return false (non-0) when an error occurs, instead of calling fail.
# The way the settings are saved into ${LOCAL_TEST_DIR}/files/$FILE_NAME/ does not matter, but make sure it exists and that ${LOCAL_TEST_DIR}/files/$FILE_NAME/modulename contains the module subtype and nothing else.
#
# @param    The settings file to read from.
# @param    The line number at which this file object was defined. The first line in the settings file is at line $(($2 + 1))
#
# @return   True (0) iff the settings were parsed and saves succesfully.
##
function fileReadSettings() {
    local parameterName=""
    local parameterValue=""
    LINE_NUMBER=$(($2 + 1))
    FILE_LOCAL_PATH=""
    # Parse all parameters
    while IFS="" read LINE; do
        if [ "" = "$LINE" ]; then
            LINE_NUMBER=$(($LINE_NUMBER + 1))
            continue
        fi
        parameterName=`getParameterName "$LINE"`
        checkFailScenarioFile "$6"
        parameterValue=`getParameterValue "$LINE"`
        # Handle this parameter appropiately
        case $parameterName in
            name|rootHash)
                # These are the generic settings that have already been parsed. Usually one can ignore them as such.
                ;;
            path)
                if [ ! -f "$parameterValue" ]; then
                    logError "file:local :: Path to a file was given to file $FILE_NAME, but no such file exists: \"$parameterValue\" (line $LINE_NUMBER)."
                    return 1
                fi
                if [ ! -z "$FILE_LOCAL_PATH" ]; then
                    logError "file:local :: File $FILE_NAME already has a path associated with it (line $LINE_NUMBER)."
                    return 1
                fi
                FILE_LOCAL_PATH="$parameterValue"
                ;;
            *)
                logError "file:local :: Unknown parameter name \"$parameterName\" in file $FILE_NAME. Ignoring."
                ;;
        esac
        LINE_NUMBER=$(($LINE_NUMBER + 1))
    done < "$1";

    if [ -z "$FILE_LOCAL_PATH" ]; then
        logError "file:local :: File $FILE_NAME has not path associated with it, but that is required for files of type 'file' (line $LINE_NUMBER)."
        return 1
    fi

    # Delegate standard saving to the default implementation
    fileReadSettings__default
    # Any variables set up above should be saved like this:
    # echo "YOUR_SETTING=\"$YOUR_SETTING\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"
    echo "FILE_LOCAL_PATH=\"$FILE_LOCAL_PATH\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"

    # Try and create a torrent file for this single file.
    loadFunctionsScript torrent.sh
    FILE_LOCAL_TORRENT=''
    if torrentCreateFromSingleFile "$FILE_LOCAL_PATH" "${LOCAL_TEST_DIR}/files/$FILE_NAME/torrent.torrent"; then
        FILE_LOCAL_TORRENT="${LOCAL_TEST_DIR}/files/$FILE_NAME/torrent.torrent"
    fi
    echo "FILE_LOCAL_TORRENT=\"$FILE_LOCAL_TORRENT\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"

    # FIXME: Automated root hash calculation? Use FILE_ROOTHASH

    return 0
}

##
# Loads previously saved settings into memory.
# Be sure to override all relevant variables, whether they're saved or not.
#
# @param    The name of the file object to be loaded.
##
function fileLoadSettings() {
    # By default delegated to the default implementation, which works fine if the default implementation for fileReadSettings is used
    fileLoadSettings__default "$1" "local"
}

##
# Send any required files to the host.
# This function will be called for each host.
# Use the host API to do the actual sending of the files.
##
function fileSendToHost() {
    hostSendCommand "mkdir -p \"`hostGetTestDir`/files/$FILE_NAME/\""
    if [ ! -z "$FILE_LOCAL_TORRENT" ]; then
        hostSendFile "$FILE_LOCAL_TORRENT" "`hostGetTestDir`/files/$FILE_NAME/torrent.torrent"
    fi
}

##
# Send any files required for seeding to the host.
# This function will be called for each host on which seeding of the file is needed.
# Note that fileSendToHost will also be called, before this function is called.
# Use the host API to do the actual sending of the files.
##
function fileSendToSeedingHost() {
    hostSendFile "$FILE_LOCAL_PATH" "`hostGetTestDir`/files/$FILE_NAME/outputFile"
}

##
# Output the path to the file, or the root directory of a set of files, on the currently loaded host.
# This assumes that fileSendToHost has already been called.
# This file is only available for seeding hosts, use the execution API to verify this, if needed.
# Use the host API for host specific queries, if needed.
#
# Note that the file's name is outputFile on the remote host; this is to have an equal file name on disk as is proposed in the .torrent.
# See torrentCreateFromSingleFile.
##
function fileGetName() {
    if executionIsSeeder; then
        echo "`hostGetTestDir`/files/$FILE_NAME/outputFile"
    else
        echo ""
    fi
}

##
# Output the path to the file containing metadata on the currently loaded host.
# If no such file is available, output "".
# An example of a metadata file is a .torrent file.
# Use the host API for host specific queries, if needed.
##
function fileGetMetaName() {
    if [ -z "$FILE_LOCAL_TORRENT" ]; then
        echo ''
    else
        echo "`hostGetTestDir`files/$FILE_NAME/torrent.torrent"
    fi
}

##
# Output the Merkle root hash of the file.
# If no such root hash is known, output "".
##
function fileGetRootHash() {
    # Default implementation just uses FILE_ROOTHASH
    fileGetRootHash__default
}

##
# This function returns the API version implemented in this object.
# You should always leave this number in tact, unless you have upgraded the module to another version.
# This version number is used to check compatibilities with the core.
#
# @output   The API version number.
##
function fileAPIVersion() {
    echo "1.0.0"
}
