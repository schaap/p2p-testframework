#!/bin/bash

#
# A test implementation for the file API.
# This implementation uses the file testseedingfile, which contains "abcdef" as data. A testfile is also sent to each hosts, but never used.
# Metadata is not supported. Root hash of testseedingfile is hardcoded.
# Use file:fake for more elaborate testing.
#

##
# Read settings from the provided settings file and save them to ${LOCAL_TEST_DIR}/files/$FILE_NAME .
# Please return false (non-0) when an error occurs, instead of calling fail.
# The way the settings are saved into ${LOCAL_TEST_DIR}/files/$FILE_NAME/ does not matter, but make sure it exists and that ${LOCAL_TEST_DIR}/files/$FILE_NAME/modulename contains the module subtype and nothing else.
#
# @param    The settings file to read from.
# @param    The line number at which this file object was defined. The first line in the settings file is at line $(($2 + 1))
#
# @return   True (0) iff the settings were parsed and saves succesfully.
##
function fileReadSettings() {
    local parameterName=""
    local parameterValue=""
    LINE_NUMBER=$(($2 + 1))
    # Parse all parameters
    while IFS="" read LINE; do
        if [ "" = "$LINE" ]; then
            LINE_NUMBER=$(($LINE_NUMBER + 1))
            continue
        fi

        parameterName=`getParameterName "$LINE"`
        checkFailScenarioFile "$6"
        parameterValue=`getParameterValue "$LINE"`
        # Handle this parameter appropiately
        case $parameterName in
            name|rootHash)
                # These are the generic settings that have already been parsed. Usually one can ignore them as such.
                ;;
            *)
                logError "file:test__ :: Unknown parameter name \"$parameterName\" in file $FILE_NAME. Ignoring."
                ;;
        esac
        LINE_NUMBER=$(($LINE_NUMBER + 1))
    done < "$1";

    if [ -z "$FILE_ROOTHASH" ]; then
        # Hardcoded Merkle Root Hash for the file generated in fileSendToHost
        FILE_ROOTHASH="97bb2117ad9bc68bc8bec3cca3a113ef30aebc37"
    fi

    # Delegate the rest to the default implementation
    fileReadSettings__default
    # Any variables set up above should be saved like this:
    # echo "YOUR_SETTING=\"$YOUR_SETTING\"" >> "${LOCAL_TEST_DIR}/files/$FILE_NAME/conf"

    # Finally, register our file with the environment
    FILES="$FILES $FILE_NAME"
    return 0
}

##
# Loads previously saved settings into memory.
# Be sure to override all relevant variables, whether they're saved or not.
#
# @param    The name of the file object to be loaded.
##
function fileLoadSettings() {
    # By default delegated to the default implementation, which works fine if the default implementation for fileReadSettings is used
    fileLoadSettings__default "$1" "test__"
}

##
# Send any required files to the host.
# This function will be called for each host.
# Use the host API to do the actual sending of the files.
##
function fileSendToHost() {
    local file=`createTempFile`
    local counter=0
    echo -n > "$file"
    while [ $counter -lt 1024 ]; do
        echo -n "hijklmn" >> "$file"
        counter=$(($counter + 1))
    done
    echo >> "$file"
    hostSendFile "$file" "`hostGetTestDir`/testfile"
    rm -f "$file"
}

##
# Send any files required for seeding to the host.
# This function will be called for each host on which seeding of the file is needed.
# Note that fileSendToHost will also be called, before this function is called.
# Use the host API to do the actual sending of the files.
##
function fileSendToSeedingHost() {
    local file=`createTempFile`
    local counter=0
    echo -n "" > "$file"
    while [ $counter -lt 1024 ]; do
        echo -n "abcdefg" >> "$file"
        counter=$(($counter + 1))
    done
    echo >> "$file"
    hostSendFile "$file" "`hostGetTestDir`/testseedingfile"
    rm -f "$file"
}

##
# Output the path to the file, or the root directory of a set of files, on the currently loaded host.
# This assumes that fileSendToHost has already been called.
# This file is only available for seeding hosts, use the execution API to verify this, if needed.
# Use the host API for host specific queries, if needed.
##
function fileGetName() {
    echo "`hostGetTestDir`/testseedingfile"
}

##
# Output the path to the file containing metadata on the currently loaded host.
# If no such file is available, output "".
# An example of a metadata file is a .torrent file.
# Use the host API for host specific queries, if needed.
##
function fileGetMetaName() {
    echo ""
}

##
# Output the Merkle root hash of the file.
# If no such root hash is known, output "".
##
function fileGetRootHash() {
    # Default implementation just uses FILE_ROOTHASH
    fileGetRootHash__default
}

##
# This function returns the API version implemented in this object.
# You should always leave this number in tact, unless you have upgraded the module to another version.
# This version number is used to check compatibilities with the core.
#
# @output   The API version number.
##
function fileAPIVersion() {
    echo "1.0.0"
}
