#!/bin/bash

#
# The default implementations for the viewer API.
# Module implementors can copy these functions if they really wish to change them, or just call them if needed.
# Whenever copying, please do NOT overwrite the default implementations, but just the actual API function.
#

##
# Returns the API version of this defaults file.
# This function should not be used by implementations!
#
# @output   The API version
##
function viewerAPIVersion__default() {
    echo "1.0.0"
}

##
# Read settings from the provided settings file and save them to ${LOCAL_TEST_DIR}/viewer/view_$VIEWER_NUMBER .
# This default implementation just writes all the default parameters to "${LOCAL_TEST_DIR}/viewer/view_$VIEWER_NUMBER/conf"
##
function viewerReadSettings__default() {
    mkdir -p "${LOCAL_TEST_DIR}/viewers/view_$VIEWER_NUMBER/"
    echo -n "$VIEWER_SUBTYPE" > "${LOCAL_TEST_DIR}/viewers/view_$VIEWER_NUMBER/modulename"

    # Save all settings, including the generic ones, to a file
    # Easiest is just a bash script that sets all variables, but anything is allowed as long as ${LOCAL_TEST_DIR}/viewers/view_$VIEWER_NUMBEr/ is created and ${LOCAL_TEST_DIR}/viewers/view_$VIEWER_NUMBER/modulename contains the module subtype.
    echo "#!/bin/bash" > "${LOCAL_TEST_DIR}/viewers/view_$VIEWER_NUMBER/conf"
    echo "VIEWER_NUMBER=\"$VIEWER_NUMBER\"" >> "${LOCAL_TEST_DIR}/viewers/view_$VIEWER_NUMBER/conf"
    echo "VIEWER_SUBTYPE=\"$VIEWER_SUBTYPE\"" >> "${LOCAL_TEST_DIR}/viewers/view_$VIEWER_NUMBER/conf"
}

##
# Loads previously saved settings into memory by loading "${LOCAL_TEST_DIR}/viewers/proc_$1/conf"
# Checks "${LOCAL_TEST_DIR}/viewers/proc_$1/modulename" against "$2" to be sure the correct module type will be loaded and offloads to the correct module is needed
#
# This default implementation complements the default implementation for viewerReadSettings
#
# @param    The number of the viewer object to be loaded.
# @param    The name of this module subtype
##
function viewerLoadSettings__default() {
    if [ ! -d "${LOCAL_TEST_DIR}/viewers/view_$1" ]; then
        logError "viewer:_defaults_ :: Can't load settings for viewer $1"
        fail
    fi
    if [ `cat "${LOCAL_TEST_DIR}/viewers/view_$1/modulename"` != "$2" ]; then
        function viewerAPIVersion() {
            echo "wrong"
        }
        loadModule viewer/`cat "${LOCAL_TEST_DIR}/viewers/view_$1/modulename"`
        if [ "`viewerAPIVersion`" != `viewerAPIVersion__default` ]; then
            logError "viewer:_defaults_ :: API version mismatch: the core expects API version `viewerAPIVersion__default` but module viewer:`cat "${LOCAL_TEST_DIR}/viewers/$1/modulename"` seems to have API version `viewerAPIVersion`."
            fail
        fi
        viewerLoadSettings $1
        return
    fi
    . "${LOCAL_TEST_DIR}/viewers/view_$1/conf"
}

##
# Creates the view from the processed data.
#
# No default implementation
#
# @param    processedDir    The directory on the local machine where processed data resides.
# @param    viewDir         The directory on the local machine where views are to be placed.
##
#function viewerCreateView() {
#}
