#!/bin/bash

#
# The default implementation for the parser API.
# Module implementors can copy these functions if they really wish to change them, or just call them if needed.
# Whenever copying, please do NOT overwrite the default implementations, but just the actual API function.
#

##
# Returns the API version of this defaults file.
# This function should not be used by implementations!
#
# @output   The API version
##
function parserAPIVersion__default() {
    echo "1.0.2"
}

##
# Read settings from the provided settings file and save them to ${LOCAL_TEST_DIR}/parser/$PARSER_NAME .
# This default implementation just writes all the default parameters to "${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/conf"
##
function parserReadSettings__default() {
    mkdir -p "${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/"
    echo -n "$PARSER_SUBTYPE" > "${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/modulename"

    # Save all settings, including the generic ones, to a file
    # Easiest is just a bash script that sets all variables, but anything is allowed as long as ${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/ is created and ${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/modulename contains the module subtype.
    echo "#!/bin/bash" > "${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/conf"
    echo "PARSER_NAME=\"$PARSER_NAME\"" >> "${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/conf"
    echo "PARSER_SUBTYPE=\"$PARSER_SUBTYPE\"" >> "${LOCAL_TEST_DIR}/parsers/$PARSER_NAME/conf"
}

##
# Loads previously saved settings into memory by loading "${LOCAL_TEST_DIR}/parsers/$1/conf"
# Checks "${LOCAL_TEST_DIR}/parsers/$1/modulename" against "$2" to be sure the correct module type will be loaded and offloads to the correct module is needed
#
# This default implementation complements the default implementation for parserReadSettings
#
# @param    The name of the parser object to be loaded.
# @param    The name of this module subtype
##
function parserLoadSettings__default() {
    if [ ! -d "${LOCAL_TEST_DIR}/parsers/$1" ]; then
        logError "parser:_defaults_ :: Can't load settings for parser $1"
        fail
    fi
    if [ `cat "${LOCAL_TEST_DIR}/parsers/$1/modulename"` != "$2" ]; then
        function parserAPIVersion() {
            echo "wrong"
        }
        loadModule parser/`cat "${LOCAL_TEST_DIR}/parsers/$1/modulename"`
        if [ "`parserAPIVersion`" != `parserAPIVersion__default` ]; then
            logError "parser:_defaults_ :: API version mismatch: the core expects API version `parserAPIVersion__default` but module parser:`cat "${LOCAL_TEST_DIR}/parsers/$1/modulename"` seems to have API version `parserAPIVersion`."
            fail
        fi
        parserLoadSettings $1
        return
    fi
    . "${LOCAL_TEST_DIR}/parsers/$1/conf"
}

##
# Loads the default settings for this parser.
# Be sure to override all relevant variables, whether they have a default or not (in which case: override them with "").
#
# No default implementation
##
#function parserLoadDefaultSettings() {
#    PARSER_NAME=""
#    PARSER_SUBTYPE="MODULE_SUBTYPE"
#}

##
# Parse the logs for the current execution.
# Use the execution API to find out data about this particular execution.
#
# Be sure to document in the header of your module file which logs you expect to be present and with which filename.
#
# No default implementation
#
# @param    logDir      The directory on the local machine where the log files are stored.
# @param    outputDir   The directory on the local machine where parsed logs are to be stored.
##
#function parserParseLogs() {
#}
