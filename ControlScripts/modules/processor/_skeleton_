#!/bin/bash

#
# A skeleton implementation (i.e. interface description) for the processor API.
# The interface described in this file should be implemented by each processor module.
# Module implementors can copy this file and modify it as they see fit.
# Minimal implementation that have no further parameters than the generic parameters need only implement processorProcessLogs. Do not forget to update the module name in processorLoadSettings!
#
# This module expects the following raw logs to be present:
# - FILL IN
# - FILL IN
# - FILL IN
# ...
#
# This module expects the following parsed logs to be present:
# - FILL IN
# - FILL IN
# - FILL IN
# ...
#
# This module outputs the following generated files:
# - FILL IN
# -- description
# - FILL IN
# -- description
# - FILL IN
# -- description
# ...
#

##
# Read settings from the provided settings file and save them to ${LOCAL_TEST_DIR}/processors/proc_$PROCESSOR_NUMBER .
# Please return false (non-0) when an error occurs, instead of calling fail.
# The way the settings are saved into ${LOCAL_TEST_DIR}/processors/proc_$PROCESSOR_NUMBER/ does not matter, but make sure it exists and that ${LOCAL_TEST_DIR}/processors/proc_$PROCESSOR_NUMBER/modulename contains the module subtype and nothing else.
#
# @param    The settings file to read from.
# @param    The line number at which this processor object was defined. The first line in the settings file is at line $(($2 + 1))
#
# @return   True (0) iff the settings were parsed and saves succesfully.
##
function processorReadSettings() {
    local parameterName=""
    local parameterValue=""
    LINE_NUMBER=$(($2 + 1))
    # Parse all parameters
    while IFS="" read LINE; do
        if [ "" = "$LINE" ]; then
            LINE_NUMBER=$(($LINE_NUMBER + 1))
            continue
        fi

        parameterName=`getParameterName "$LINE"`
        checkFailScenarioFile "$6"
        parameterValue=`getParameterValue "$LINE"`
        # Handle this parameter appropiately
        case $parameterName in
            *)
                logError "processor:_skeleton_ :: Unknown parameter name \"$parameterName\" in processor $PROCESSOR_NUMBER. Ignoring."
                ;;
        esac
        LINE_NUMBER=$(($LINE_NUMBER + 1))
    done < "$1";

    # Delegate the rest to the default implementation
    processorReadSettings__default
    # Any variables set up above should be saved like this:
    # echo "YOUR_SETTING=\"$YOUR_SETTING\"" >> "${LOCAL_TEST_DIR}/processors/proc_$PROCESSOR_NUMBER/conf"

    return 0
}

##
# Loads previously saved settings into memory.
# Be sure to override all relevant variables, whether they're saved or not.
#
# @param    The name of the file object to be loaded.
##
function processorLoadSettings() {
    # By default delegated to the default implementation, which works fine if the default implementation for processorReadSettings is used
    # TODO: CHANGE MODULE NAME BELOW
    processorLoadSettings__default "$1" "MODULE_SUBTYPE"
}

##
# Processes the raw and parsed logs found in the base directory.
# The raw logs are found in exec_${execNum}/logs/.
# The parsed logs are found in exec_${execNum}/parsedLogs/.
# Here, ${execNum} ranges from 0 to $((${EXECUTION_COUNT} - 1)), inclusive.
#
# It migt happen that more information about the executions or their parts is required.
# In such cases, use the Execution API to load the execution and continue from there on.
# For example, to figure out the client module subtype of execution $execNum:
#   executionLoadSettings $execNum
#   executionLoadClient
#   currentExecutionClientType=$CLIENT_SUBTYPE
#
# @param    The base directory for the logs.
# @param    The directory in which to place processed results.
##
function processorProcessLogs() {
    # TODO

    for execNum in `seq 0 $((${EXECUTION_COUNT} - 1))`; do
        local rawLogDir="$1/exec_${execNum}/logs"
        local parsedLogDir="$1/exec_${execNum}/parsedLogs"
        echo "TO BE IMPLEMENTED"
    done
}

##
# This function returns the API version implemented in this object.
# You should always leave this number in tact, unless you have upgraded the module to another version.
# This version number is used to check compatibilities with the core.
#
# @output   The API version number.
##
function processorAPIVersion() {
    echo "1.0.1"
}
